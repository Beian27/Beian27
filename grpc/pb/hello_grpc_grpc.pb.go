// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloGRPCClient is the client API for HelloGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloGRPCClient interface {
	SayHi(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	SayHi1(ctx context.Context, opts ...grpc.CallOption) (HelloGRPC_SayHi1Client, error)
	SayHi2(ctx context.Context, in *Req, opts ...grpc.CallOption) (HelloGRPC_SayHi2Client, error)
	SayHi3(ctx context.Context, opts ...grpc.CallOption) (HelloGRPC_SayHi3Client, error)
}

type helloGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloGRPCClient(cc grpc.ClientConnInterface) HelloGRPCClient {
	return &helloGRPCClient{cc}
}

func (c *helloGRPCClient) SayHi(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/hello_grpc.HelloGRPC/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGRPCClient) SayHi1(ctx context.Context, opts ...grpc.CallOption) (HelloGRPC_SayHi1Client, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGRPC_ServiceDesc.Streams[0], "/hello_grpc.HelloGRPC/SayHi1", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGRPCSayHi1Client{stream}
	return x, nil
}

type HelloGRPC_SayHi1Client interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type helloGRPCSayHi1Client struct {
	grpc.ClientStream
}

func (x *helloGRPCSayHi1Client) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGRPCSayHi1Client) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloGRPCClient) SayHi2(ctx context.Context, in *Req, opts ...grpc.CallOption) (HelloGRPC_SayHi2Client, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGRPC_ServiceDesc.Streams[1], "/hello_grpc.HelloGRPC/SayHi2", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGRPCSayHi2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloGRPC_SayHi2Client interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type helloGRPCSayHi2Client struct {
	grpc.ClientStream
}

func (x *helloGRPCSayHi2Client) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloGRPCClient) SayHi3(ctx context.Context, opts ...grpc.CallOption) (HelloGRPC_SayHi3Client, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGRPC_ServiceDesc.Streams[2], "/hello_grpc.HelloGRPC/SayHi3", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGRPCSayHi3Client{stream}
	return x, nil
}

type HelloGRPC_SayHi3Client interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type helloGRPCSayHi3Client struct {
	grpc.ClientStream
}

func (x *helloGRPCSayHi3Client) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGRPCSayHi3Client) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloGRPCServer is the server API for HelloGRPC service.
// All implementations must embed UnimplementedHelloGRPCServer
// for forward compatibility
type HelloGRPCServer interface {
	SayHi(context.Context, *Req) (*Res, error)
	SayHi1(HelloGRPC_SayHi1Server) error
	SayHi2(*Req, HelloGRPC_SayHi2Server) error
	SayHi3(HelloGRPC_SayHi3Server) error
	mustEmbedUnimplementedHelloGRPCServer()
}

// UnimplementedHelloGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHelloGRPCServer struct {
}

func (UnimplementedHelloGRPCServer) SayHi(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedHelloGRPCServer) SayHi1(HelloGRPC_SayHi1Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHi1 not implemented")
}
func (UnimplementedHelloGRPCServer) SayHi2(*Req, HelloGRPC_SayHi2Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHi2 not implemented")
}
func (UnimplementedHelloGRPCServer) SayHi3(HelloGRPC_SayHi3Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHi3 not implemented")
}
func (UnimplementedHelloGRPCServer) mustEmbedUnimplementedHelloGRPCServer() {}

// UnsafeHelloGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloGRPCServer will
// result in compilation errors.
type UnsafeHelloGRPCServer interface {
	mustEmbedUnimplementedHelloGRPCServer()
}

func RegisterHelloGRPCServer(s grpc.ServiceRegistrar, srv HelloGRPCServer) {
	s.RegisterService(&HelloGRPC_ServiceDesc, srv)
}

func _HelloGRPC_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGRPCServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_grpc.HelloGRPC/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGRPCServer).SayHi(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGRPC_SayHi1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloGRPCServer).SayHi1(&helloGRPCSayHi1Server{stream})
}

type HelloGRPC_SayHi1Server interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloGRPCSayHi1Server struct {
	grpc.ServerStream
}

func (x *helloGRPCSayHi1Server) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGRPCSayHi1Server) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloGRPC_SayHi2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloGRPCServer).SayHi2(m, &helloGRPCSayHi2Server{stream})
}

type HelloGRPC_SayHi2Server interface {
	Send(*Res) error
	grpc.ServerStream
}

type helloGRPCSayHi2Server struct {
	grpc.ServerStream
}

func (x *helloGRPCSayHi2Server) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloGRPC_SayHi3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloGRPCServer).SayHi3(&helloGRPCSayHi3Server{stream})
}

type HelloGRPC_SayHi3Server interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloGRPCSayHi3Server struct {
	grpc.ServerStream
}

func (x *helloGRPCSayHi3Server) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGRPCSayHi3Server) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloGRPC_ServiceDesc is the grpc.ServiceDesc for HelloGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello_grpc.HelloGRPC",
	HandlerType: (*HelloGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _HelloGRPC_SayHi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHi1",
			Handler:       _HelloGRPC_SayHi1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHi2",
			Handler:       _HelloGRPC_SayHi2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHi3",
			Handler:       _HelloGRPC_SayHi3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello_grpc.proto",
}
